# Makefile for testing guido2image
#
# The principle is the following:
#   an image target generates image files using guido2image for a set of gmn files
#   the validate target makes the comparison of files generated by different versions
#
# Precondition for windows : guidogetversion.exe and GUIDOEngine.dll have to be copied in validate folder

version	:= $(shell guidogetversion | cut -d' ' -f 3)
system	:= $(shell uname -s)


guido2image := guido2image

ifeq ($(system), Darwin)
  lib =  -F../../../build/MacOS/Release/ -framework GUIDOEngine
else
ifeq ($(system), MINGW32_NT-6.1)
  libbin  := ../../../build/win32/Release
  toolbin := ../../../src/tools/build/win32/Release
  lib       = $(libbin)/GUIDOEngine.lib
  TOOLS = GUIDOEngine.dll guidogetversion.exe guido2image.exe
else
  lib = -lGUIDOEngine
endif
endif

ifdef TOOL
	TOOLPATH := $(shell basename $(TOOL))
endif

allpng 	 = $(shell [ -d $(version) ] && find $(version) -name "*.png")
alljpeg 	 = $(shell [ -d $(version) ] && find $(version) -name "*.jpeg")
validpng = $(patsubst %.png, %.outpng, $(allpng))
validjpeg = $(patsubst %.jpeg, %.outjpeg, $(alljpeg))

default: images

help:
	@echo "Makefile for testing the guido2image tool. Available targets are:"
	@echo "'images' (default): makes images files (png, jpeg) with different parameters, for a simple gmn string '[a b c]'"
	@echo "                 the output folder name is the current guido engine version number."
	@echo "'validate    VERSION=another_version': compares the current version output with another one (for Windows, Firefox has to be installed (and opened) in C:/Program Files (x86)/Mozilla Firefox/firefox, otherwise please change Makefile)"
	@echo "--------------------------------"
	@echo "'imagesclean' : removes images output"
	@echo "--------------------------------"
	@echo "'tools'     : build the tools"
	@echo "'win32'     : copy the tools and dll to the validate folder"

#########################################################################
# tools to validate the graphic output, based on pdf conversion
validate: $(validjpeg) $(validpng)
	@$(eval tmp := $(shell [ -f $(version)/ignore.$(VERSION).txt ] && echo "using $(version)/ignore.$(VERSION).txt"))	
	@echo Validating version $(version) with $(VERSION) $(tmp)
	
#########################################################################
# rules
%.outpng: %.png
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
ifeq ($(system), MINGW32_NT-6.1)
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && C:/Program\ Files\ \(x86\)/Mozilla\ Firefox/firefox -new-tab $(patsubst $(version)/%, $(VERSION)/%, $<) -new-tab $<; true)
else
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open -t $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true)
endif

%.outjpeg: %.jpeg
	$(eval tmp := $(patsubst $(version)/%, $(VERSION)/%, $<))	
	@[ -f  $(tmp) ] || echo $< : new file
	$(eval ignored := $(shell grep $< $(version)/ignore.$(VERSION).txt 2>/dev/null || echo _none_))
ifeq ($(system), MINGW32_NT-6.1)
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && C:/Program\ Files\ \(x86\)/Mozilla\ Firefox/firefox -new-tab $(patsubst $(version)/%, $(VERSION)/%, $<) -new-tab $<; true)
else
	@[ -f  $(ignored) ] || diff $< $(tmp) 2>/dev/null >/dev/null || ([ -f  $(tmp) ] && echo "open -t $< $(patsubst $(version)/%, $(VERSION)/%, $<) # to check changes"; true)
endif


#########################################################################
# tools to generate svg files
images:
	@[ -d $(version) ] || mkdir -p $(version)
	-$(guido2image) -s "[a b c]" -o "$(version)/test1.png"
	-$(guido2image) -s "[a b c]" -z10 -o "$(version)/test2.png"
	-$(guido2image) -s "[a b c]" -o "$(version)/test3.jpeg"
	-$(guido2image) -s "[a b c]" -z10 -o "$(version)/test4.jpeg"

imagesclean: 
	rm -f $(allpng) $(alljpeg)


#########################################################################
# windows specific stuff
win32: $(TOOLS)

GUIDOEngine.dll:
	cp $(libbin)/GUIDOEngine.dll .

guidogetversion.exe:
	cp $(toolbin)/guidogetversion.exe .

guido2image.exe:
	cp ../bin/guido2image.exe .

#########################################################################
# tools
cleantools:
	rm -f $(TOOLS)

#forcepdfdate: forcepdfdate.cpp
#	g++ forcepdfdate.cpp -o forcepdfdate

